specVersion: 0.0.2
description: Babelfish subgraph
repository: https://github.com/BabelFishProtocol/babelfish-subgraph.git
schema:
  file: ./schema.graphql
dataSources:
  # GovernorAdmin
  - kind: ethereum/contract
    name: GovernorAdmin
    network: {{network}}
    source:
      address: '{{contracts.GovernorAdmin.address}}'
      abi: GovernorAlpha
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - GovernorAdmin
      abis:
        - name: GovernorAlpha
          file: ./abi/GovernorAlpha.json
      eventHandlers:
        - event: ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)
          handler: handleNewProposal

        - event: ProposalQueued(uint256,uint256)
          handler: handleProposalQueued

        - event: VoteCast(address,uint256,bool,uint256)
          handler: handleVoteCast
      file: ./src/mappings/proposals.ts
  # Governor Owner
  - kind: ethereum/contract
    name: GovernorOwner
    network: {{network}}
    source:
      address: '{{contracts.GovernorOwner.address}}'
      abi: GovernorAlpha
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - GovernorOwner
      abis:
        - name: GovernorAlpha
          file: ./abi/GovernorAlpha.json
      eventHandlers:
        - event: ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)
          handler: handleNewProposal

        - event: ProposalQueued(uint256,uint256)
          handler: handleProposalQueued

        - event: VoteCast(address,uint256,bool,uint256)
          handler: handleVoteCast
      file: ./src/mappings/proposals.ts
  # Staking
  - kind: ethereum/contract
    name: Staking
    network: {{network}}
    source:
      address: '{{contracts.Staking.address}}'
      abi: Staking
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Staking
      abis:
        - name: Staking
          file: ./abi/Staking.json
      eventHandlers:
        - event: TokensStaked(indexed address,uint256,uint256,uint256)
          handler: handleTokensStaked
      file: ./src/mappings/stakingHistory.ts
  # MAsset
  - kind: ethereum/contract
    name: MassetV3
    network: {{network}}
    source:
      address: '{{contracts.Masset.address}}'
      abi: MassetV3
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - MassetV3
      abis:
        - name: MassetV3
          file: ./abi/MassetV3.json
        - name: ERC20
          file: ./abi/ERC20.json
        - name: RewardManager
          file: ./abi/RewardManager.json
      eventHandlers:
        - event: Minted(indexed address,indexed address,uint256,address,uint256)
          handler: handleMinted
        - event: Redeemed(indexed address,indexed address,uint256,address,uint256)
          handler: handleRedeemed
      file: ./src/mappings/masset.ts
  # VestingRegistry
  - kind: ethereum/contract
    name: VestingRegistry
    network: {{network}}
    source:
      address: '{{contracts.VestingRegistry.address}}'
      abi: VestingRegistry
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - VestingRegistry
      abis:
        - name: VestingRegistry
          file: ./abi/VestingRegistry.json
      eventHandlers:
        - event: VestingCreated(indexed address,address,uint256,uint256,uint256)
          handler: handleVestingCreated
        - event: TeamVestingCreated(indexed address,address,uint256,uint256,uint256)
          handler: handleTeamVestingCreated
      file: ./src/mappings/vestingRegistry.ts
  # BasketManagerV3.json
  - kind: ethereum/contract
    name: BasketManagerV3
    network: {{network}}
    source:
      address: '{{contracts.BasketManagerV3.address}}'
      abi: BasketManagerV3
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - BasketManagerV3
      abis:
        - name: BasketManagerV3
          file: ./abi/BasketManagerV3.json
        - name: ERC20
          file: ./abi/ERC20.json
      eventHandlers:
        - event: BassetAdded(address)
          handler: handleBassetAdded
        - event: BassetRemoved(address)
          handler: handleBassetRemoved
      file: ./src/mappings/basketManager.ts
    # PauseManager
  - kind: ethereum/contract
    name: PauseManager
    network: {{network}}
    source:
      address: '{{contracts.PauseManager.address}}'
      abi: PauseManager
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - PauseManager
      abis:
        - name: PauseManager
          file: ./abi/PauseManager.json
      eventHandlers:
        - event: onPause(indexed address,indexed address)
          handler: handleOnPause
        - event: onUnpause(indexed address,indexed address)
          handler: handleOnUnpause
      file: ./src/mappings/pauseManager.ts
    # RewardManager
  - kind: ethereum/contract
    name: RewardManager
    network: {{network}}
    source:
      address: '{{contracts.RewardManager.address}}'
      abi: RewardManager
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - RewardManager
      abis:
        - name: RewardManager
          file: ./abi/RewardManager.json
      eventHandlers:
        - event: onFactorChanged(indexed address,uint256)
          handler: handleOnFactorChanged
        - event: onTargetWeightChanged(indexed address,indexed address,uint256)
          handler: handleOnTargetWeightChanged
        - event: onGlobalMaxPenaltyChanged(indexed address,uint256)
          handler: handleOnGlobalMaxPenaltyChanged
        - event: onGlobalMaxRewardChanged(indexed address,uint256)
          handler: handleOnGlobalMaxRewardChanged
      file: ./src/mappings/rewardManager.ts
    # RewardManagetTransfers
  - kind: ethereum/contract
    name: RewardManagetTransfers
    network: mainnet
    source:
      address: '{{contracts.XUSD.address}}'
      abi: ERC20
      startBlock: 1929321
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - ERC20
      abis:
        - name: ERC20
          file: ./abi/ERC20.json
        - name: RewardManager
          file: ./abi/RewardManager.json
      eventHandlers:
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer
      file: ./src/mappings/rewardManager.ts
