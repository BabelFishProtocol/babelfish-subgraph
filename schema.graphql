type Vote @entity {
  id: ID!
  voter: Bytes!
  txHash: Bytes!
  proposal: Proposal!
  votes: BigInt!
  isPro: Boolean!
}

type ProposalAction @entity {
  id: ID!
  contract: Bytes!
  signature: String!
  proposal: Proposal!
  calldata: Bytes!
}

type Proposal @entity {
  id: ID!
  createdAt: BigInt!
  proposalId: BigInt!
  contractAddress: Bytes!
  eta: BigInt
  description: String!
  startBlock: BigInt!
  startDate: BigInt!
  endBlock: BigInt!
  proposer: Bytes!
  forVotesAmount: BigInt!
  againstVotesAmount: BigInt!
  votes: [Vote!]! @derivedFrom(field: "proposal")
  actions: [ProposalAction!]! @derivedFrom(field: "proposal")
}

type StakeEvent @entity {
  id: ID!
  staker: Bytes!
  amount: BigInt!
  lockedUntil: BigInt!
  totalStaked: BigInt!
  transactionHash: Bytes!
  blockTimestamp: BigInt!
}

type VestingContract @entity {
  id: ID!
  owner: Bytes!
  address: Bytes!
  stakes: [StakeEvent!]!
  type: String!
}

type User @entity {
  id: ID!
  address: Bytes!
  allStakes: [StakeEvent!]!
  stakes: [StakeEvent!]!
  vests: [VestingContract!]!
}

enum Event {
  Deposit
  Withdraw
}

enum RewardManagerEvent {
  Penalty
  Reward
}

type RewardManagerXusdTransaction @entity {
  id: ID!
  event: RewardManagerEvent!
  amount: BigInt!
  date: BigInt!
  user: Bytes
  txHash: Bytes!
  receiver: Bytes!
}

type XusdTransaction @entity {
  id: ID!
  event: Event!
  asset: Bytes!
  amount: BigInt!
  date: BigInt!
  user: Bytes!
  txHash: Bytes!
  receiver: Bytes!
}

type Global @entity {
  id: ID! # id is 'only'
  assets: [BAsset!] @derivedFrom(field: "global")
  rewardManagerFactor: BigInt
  rewardManagerGlobalMaxPenalty: BigInt
  rewardManagerGlobalMaxReward: BigInt
  rewardManagerExecuted: Boolean
}

type BAsset @entity {
  id: ID!
  symbol: String
  name: String
  decimals: Int
  paused: Boolean!
  global: Global!
  targetWeight: BigInt
}
